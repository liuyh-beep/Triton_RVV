module {
  tt.func public @matmul_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg3: i32 {tt.divisibility = 16 : i32}, %arg4: i32 {tt.divisibility = 16 : i32}, %arg5: i32 {tt.divisibility = 16 : i32}, %arg6: i32 {tt.divisibility = 16 : i32}, %arg7: i32 {tt.divisibility = 16 : i32}, %arg8: i32 {tt.divisibility = 16 : i32}) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : vector<8xf32>
    %c7 = arith.constant 7 : index
    %c6 = arith.constant 6 : index
    %c5 = arith.constant 5 : index
    %c4 = arith.constant 4 : index
    %c3 = arith.constant 3 : index
    %c2 = arith.constant 2 : index
    %c1 = arith.constant 1 : index
    %cst_0 = arith.constant dense<32> : vector<8x8xi64>
    %c6_i32 = arith.constant 6 : i32
    %c5_i32 = arith.constant 5 : i32
    %c3_i32 = arith.constant 3 : i32
    %c2_i32 = arith.constant 2 : i32
    %c0 = arith.constant 0 : index
    %cst_1 = arith.constant dense<4> : vector<8x8xi32>
    %cst_2 = arith.constant dense<[0, 1, 2, 3, 4, 5, 6, 7]> : vector<8xi32>
    %c4_i32 = arith.constant 4 : i32
    %c8_i32 = arith.constant 8 : i32
    %cst_3 = arith.constant dense<0.000000e+00> : vector<8x8xf32>
    %c7_i32 = arith.constant 7 : i32
    %c1_i32 = arith.constant 1 : i32
    %c0_i32 = arith.constant 0 : i32
    %0 = tt.get_program_id x : i32
    %1 = arith.addi %arg3, %c7_i32 : i32
    %2 = arith.divsi %1, %c8_i32 : i32
    %3 = arith.addi %arg4, %c7_i32 : i32
    %4 = arith.divsi %3, %c8_i32 : i32
    %5 = arith.muli %4, %c4_i32 : i32
    %6 = arith.divsi %0, %5 : i32
    %7 = arith.muli %6, %c4_i32 : i32
    %8 = arith.subi %2, %7 : i32
    %9 = arith.minsi %8, %c4_i32 : i32
    %10 = arith.remsi %0, %9 : i32
    %11 = arith.addi %7, %10 : i32
    %12 = arith.remsi %0, %5 : i32
    %13 = arith.divsi %12, %9 : i32
    %14 = arith.muli %11, %c8_i32 : i32
    %15 = vector.splat %14 : vector<8xi32>
    %16 = arith.addi %15, %cst_2 : vector<8xi32>
    %17 = vector.splat %arg3 : vector<8xi32>
    %18 = arith.remsi %16, %17 : vector<8xi32>
    %19 = arith.muli %13, %c8_i32 : i32
    %20 = vector.splat %19 : vector<8xi32>
    %21 = arith.addi %20, %cst_2 : vector<8xi32>
    %22 = vector.splat %arg4 : vector<8xi32>
    %23 = arith.remsi %21, %22 : vector<8xi32>
    %24 = vector.shape_cast %18 {axis = 1 : i32} : vector<8xi32> to vector<8x1xi32>
    %25 = vector.splat %arg6 : vector<8x1xi32>
    %26 = arith.muli %24, %25 : vector<8x1xi32>
    %27 = vector.shape_cast %cst_2 {axis = 0 : i32} : vector<8xi32> to vector<1x8xi32>
    %28 = vector.broadcast %26 : vector<8x1xi32> to vector<8x8xi32>
    %29 = vector.broadcast %27 : vector<1x8xi32> to vector<8x8xi32>
    %30 = arith.addi %28, %29 : vector<8x8xi32>
    %31 = tt.ptr_to_int %arg0 : !tt.ptr<f32> -> i64
    %32 = vector.splat %31 : vector<8x8xi64>
    %33 = arith.muli %30, %cst_1 : vector<8x8xi32>
    %34 = arith.extsi %33 : vector<8x8xi32> to vector<8x8xi64>
    %35 = arith.addi %32, %34 : vector<8x8xi64>
    %36 = vector.shape_cast %cst_2 {axis = 1 : i32} : vector<8xi32> to vector<8x1xi32>
    %37 = vector.splat %arg7 : vector<8x1xi32>
    %38 = arith.muli %36, %37 : vector<8x1xi32>
    %39 = vector.shape_cast %23 {axis = 0 : i32} : vector<8xi32> to vector<1x8xi32>
    %40 = vector.broadcast %38 : vector<8x1xi32> to vector<8x8xi32>
    %41 = vector.broadcast %39 : vector<1x8xi32> to vector<8x8xi32>
    %42 = arith.addi %40, %41 : vector<8x8xi32>
    %43 = tt.ptr_to_int %arg1 : !tt.ptr<f32> -> i64
    %44 = vector.splat %43 : vector<8x8xi64>
    %45 = arith.muli %42, %cst_1 : vector<8x8xi32>
    %46 = arith.extsi %45 : vector<8x8xi32> to vector<8x8xi64>
    %47 = arith.addi %44, %46 : vector<8x8xi64>
    %48 = arith.divsi %arg5, %c8_i32 : i32
    %49 = arith.muli %arg7, %c8_i32 : i32
    %50 = vector.splat %49 : vector<8x8xi32>
    %alloca = memref.alloca() {alignment = 64 : i64} : memref<8x8xf32>
    %alloca_4 = memref.alloca() {alignment = 64 : i64} : memref<8x8xf32>
    %51:10 = scf.for %arg9 = %c0_i32 to %48 step %c1_i32 iter_args(%arg10 = %35, %arg11 = %47, %arg12 = %cst, %arg13 = %cst, %arg14 = %cst, %arg15 = %cst, %arg16 = %cst, %arg17 = %cst, %arg18 = %cst, %arg19 = %cst) -> (vector<8x8xi64>, vector<8x8xi64>, vector<8xf32>, vector<8xf32>, vector<8xf32>, vector<8xf32>, vector<8xf32>, vector<8xf32>, vector<8xf32>, vector<8xf32>)  : i32 {
      %108 = vector.extract %arg10[0, 0] : i64 from vector<8x8xi64>
      %109 = tt.int_to_ptr %108 : i64 -> !tt.ptr<f32>
      %110 = triton_cpu.ptr_to_memref %109 : <f32> -> memref<8xf32>
      %111 = vector.load %110[%c0] : memref<8xf32>, vector<8xf32>
      %112 = vector.insert %111, %cst_3 [0] : vector<8xf32> into vector<8x8xf32>
      %113 = vector.extract %arg10[1, 0] : i64 from vector<8x8xi64>
      %114 = tt.int_to_ptr %113 : i64 -> !tt.ptr<f32>
      %115 = triton_cpu.ptr_to_memref %114 : <f32> -> memref<8xf32>
      %116 = vector.load %115[%c0] : memref<8xf32>, vector<8xf32>
      %117 = vector.insert %116, %112 [1] : vector<8xf32> into vector<8x8xf32>
      %118 = vector.extract %arg10[2, 0] : i64 from vector<8x8xi64>
      %119 = tt.int_to_ptr %118 : i64 -> !tt.ptr<f32>
      %120 = triton_cpu.ptr_to_memref %119 : <f32> -> memref<8xf32>
      %121 = vector.load %120[%c0] : memref<8xf32>, vector<8xf32>
      %122 = vector.insert %121, %117 [2] : vector<8xf32> into vector<8x8xf32>
      %123 = vector.extract %arg10[3, 0] : i64 from vector<8x8xi64>
      %124 = tt.int_to_ptr %123 : i64 -> !tt.ptr<f32>
      %125 = triton_cpu.ptr_to_memref %124 : <f32> -> memref<8xf32>
      %126 = vector.load %125[%c0] : memref<8xf32>, vector<8xf32>
      %127 = vector.insert %126, %122 [3] : vector<8xf32> into vector<8x8xf32>
      %128 = vector.extract %arg10[4, 0] : i64 from vector<8x8xi64>
      %129 = tt.int_to_ptr %128 : i64 -> !tt.ptr<f32>
      %130 = triton_cpu.ptr_to_memref %129 : <f32> -> memref<8xf32>
      %131 = vector.load %130[%c0] : memref<8xf32>, vector<8xf32>
      %132 = vector.insert %131, %127 [4] : vector<8xf32> into vector<8x8xf32>
      %133 = vector.extract %arg10[5, 0] : i64 from vector<8x8xi64>
      %134 = tt.int_to_ptr %133 : i64 -> !tt.ptr<f32>
      %135 = triton_cpu.ptr_to_memref %134 : <f32> -> memref<8xf32>
      %136 = vector.load %135[%c0] : memref<8xf32>, vector<8xf32>
      %137 = vector.insert %136, %132 [5] : vector<8xf32> into vector<8x8xf32>
      %138 = vector.extract %arg10[6, 0] : i64 from vector<8x8xi64>
      %139 = tt.int_to_ptr %138 : i64 -> !tt.ptr<f32>
      %140 = triton_cpu.ptr_to_memref %139 : <f32> -> memref<8xf32>
      %141 = vector.load %140[%c0] : memref<8xf32>, vector<8xf32>
      %142 = vector.insert %141, %137 [6] : vector<8xf32> into vector<8x8xf32>
      %143 = vector.extract %arg10[7, 0] : i64 from vector<8x8xi64>
      %144 = tt.int_to_ptr %143 : i64 -> !tt.ptr<f32>
      %145 = triton_cpu.ptr_to_memref %144 : <f32> -> memref<8xf32>
      %146 = vector.load %145[%c0] : memref<8xf32>, vector<8xf32>
      %147 = vector.insert %146, %142 [7] : vector<8xf32> into vector<8x8xf32>
      %148 = vector.extract %arg11[0, 0] : i64 from vector<8x8xi64>
      %149 = tt.int_to_ptr %148 : i64 -> !tt.ptr<f32>
      %150 = triton_cpu.ptr_to_memref %149 : <f32> -> memref<8xf32>
      %151 = vector.load %150[%c0] : memref<8xf32>, vector<8xf32>
      %152 = vector.insert %151, %cst_3 [0] : vector<8xf32> into vector<8x8xf32>
      %153 = vector.extract %arg11[1, 0] : i64 from vector<8x8xi64>
      %154 = tt.int_to_ptr %153 : i64 -> !tt.ptr<f32>
      %155 = triton_cpu.ptr_to_memref %154 : <f32> -> memref<8xf32>
      %156 = vector.load %155[%c0] : memref<8xf32>, vector<8xf32>
      %157 = vector.insert %156, %152 [1] : vector<8xf32> into vector<8x8xf32>
      %158 = vector.extract %arg11[2, 0] : i64 from vector<8x8xi64>
      %159 = tt.int_to_ptr %158 : i64 -> !tt.ptr<f32>
      %160 = triton_cpu.ptr_to_memref %159 : <f32> -> memref<8xf32>
      %161 = vector.load %160[%c0] : memref<8xf32>, vector<8xf32>
      %162 = vector.insert %161, %157 [2] : vector<8xf32> into vector<8x8xf32>
      %163 = vector.extract %arg11[3, 0] : i64 from vector<8x8xi64>
      %164 = tt.int_to_ptr %163 : i64 -> !tt.ptr<f32>
      %165 = triton_cpu.ptr_to_memref %164 : <f32> -> memref<8xf32>
      %166 = vector.load %165[%c0] : memref<8xf32>, vector<8xf32>
      %167 = vector.insert %166, %162 [3] : vector<8xf32> into vector<8x8xf32>
      %168 = vector.extract %arg11[4, 0] : i64 from vector<8x8xi64>
      %169 = tt.int_to_ptr %168 : i64 -> !tt.ptr<f32>
      %170 = triton_cpu.ptr_to_memref %169 : <f32> -> memref<8xf32>
      %171 = vector.load %170[%c0] : memref<8xf32>, vector<8xf32>
      %172 = vector.insert %171, %167 [4] : vector<8xf32> into vector<8x8xf32>
      %173 = vector.extract %arg11[5, 0] : i64 from vector<8x8xi64>
      %174 = tt.int_to_ptr %173 : i64 -> !tt.ptr<f32>
      %175 = triton_cpu.ptr_to_memref %174 : <f32> -> memref<8xf32>
      %176 = vector.load %175[%c0] : memref<8xf32>, vector<8xf32>
      %177 = vector.insert %176, %172 [5] : vector<8xf32> into vector<8x8xf32>
      %178 = vector.extract %arg11[6, 0] : i64 from vector<8x8xi64>
      %179 = tt.int_to_ptr %178 : i64 -> !tt.ptr<f32>
      %180 = triton_cpu.ptr_to_memref %179 : <f32> -> memref<8xf32>
      %181 = vector.load %180[%c0] : memref<8xf32>, vector<8xf32>
      %182 = vector.insert %181, %177 [6] : vector<8xf32> into vector<8x8xf32>
      %183 = vector.extract %arg11[7, 0] : i64 from vector<8x8xi64>
      %184 = tt.int_to_ptr %183 : i64 -> !tt.ptr<f32>
      %185 = triton_cpu.ptr_to_memref %184 : <f32> -> memref<8xf32>
      %186 = vector.load %185[%c0] : memref<8xf32>, vector<8xf32>
      %187 = vector.insert %186, %182 [7] : vector<8xf32> into vector<8x8xf32>
      vector.transfer_write %147, %alloca[%c0, %c0] {in_bounds = [true, true]} : vector<8x8xf32>, memref<8x8xf32>
      vector.transfer_write %187, %alloca_4[%c0, %c0] {in_bounds = [true, true]} : vector<8x8xf32>, memref<8x8xf32>
      %188 = vector.load %alloca_4[%c0, %c0] : memref<8x8xf32>, vector<8xf32>
      %189 = vector.load %alloca_4[%c1, %c0] : memref<8x8xf32>, vector<8xf32>
      %190 = memref.load %alloca[%c0, %c0] : memref<8x8xf32>
      %191 = vector.broadcast %190 : f32 to vector<8xf32>
      %192 = memref.load %alloca[%c1, %c0] : memref<8x8xf32>
      %193 = vector.broadcast %192 : f32 to vector<8xf32>
      %194 = vector.fma %188, %191, %arg12 : vector<8xf32>
      %195 = memref.load %alloca[%c2, %c0] : memref<8x8xf32>
      %196 = vector.broadcast %195 : f32 to vector<8xf32>
      %197 = vector.fma %188, %193, %arg13 : vector<8xf32>
      %198 = memref.load %alloca[%c3, %c0] : memref<8x8xf32>
      %199 = vector.broadcast %198 : f32 to vector<8xf32>
      %200 = vector.fma %188, %196, %arg14 : vector<8xf32>
      %201 = memref.load %alloca[%c4, %c0] : memref<8x8xf32>
      %202 = vector.broadcast %201 : f32 to vector<8xf32>
      %203 = vector.fma %188, %199, %arg15 : vector<8xf32>
      %204 = memref.load %alloca[%c5, %c0] : memref<8x8xf32>
      %205 = vector.broadcast %204 : f32 to vector<8xf32>
      %206 = vector.fma %188, %202, %arg16 : vector<8xf32>
      %207 = memref.load %alloca[%c6, %c0] : memref<8x8xf32>
      %208 = vector.broadcast %207 : f32 to vector<8xf32>
      %209 = vector.fma %188, %205, %arg17 : vector<8xf32>
      %210 = memref.load %alloca[%c7, %c0] : memref<8x8xf32>
      %211 = vector.broadcast %210 : f32 to vector<8xf32>
      %212 = vector.fma %188, %208, %arg18 : vector<8xf32>
      %213 = vector.fma %188, %211, %arg19 : vector<8xf32>
      %214 = vector.load %alloca_4[%c2, %c0] : memref<8x8xf32>, vector<8xf32>
      %215 = memref.load %alloca[%c0, %c1] : memref<8x8xf32>
      %216 = vector.broadcast %215 : f32 to vector<8xf32>
      %217 = memref.load %alloca[%c1, %c1] : memref<8x8xf32>
      %218 = vector.broadcast %217 : f32 to vector<8xf32>
      %219 = vector.fma %189, %216, %194 : vector<8xf32>
      %220 = memref.load %alloca[%c2, %c1] : memref<8x8xf32>
      %221 = vector.broadcast %220 : f32 to vector<8xf32>
      %222 = vector.fma %189, %218, %197 : vector<8xf32>
      %223 = memref.load %alloca[%c3, %c1] : memref<8x8xf32>
      %224 = vector.broadcast %223 : f32 to vector<8xf32>
      %225 = vector.fma %189, %221, %200 : vector<8xf32>
      %226 = memref.load %alloca[%c4, %c1] : memref<8x8xf32>
      %227 = vector.broadcast %226 : f32 to vector<8xf32>
      %228 = vector.fma %189, %224, %203 : vector<8xf32>
      %229 = memref.load %alloca[%c5, %c1] : memref<8x8xf32>
      %230 = vector.broadcast %229 : f32 to vector<8xf32>
      %231 = vector.fma %189, %227, %206 : vector<8xf32>
      %232 = memref.load %alloca[%c6, %c1] : memref<8x8xf32>
      %233 = vector.broadcast %232 : f32 to vector<8xf32>
      %234 = vector.fma %189, %230, %209 : vector<8xf32>
      %235 = memref.load %alloca[%c7, %c1] : memref<8x8xf32>
      %236 = vector.broadcast %235 : f32 to vector<8xf32>
      %237 = vector.fma %189, %233, %212 : vector<8xf32>
      %238 = vector.fma %189, %236, %213 : vector<8xf32>
      %239 = vector.load %alloca_4[%c3, %c0] : memref<8x8xf32>, vector<8xf32>
      %240 = memref.load %alloca[%c0, %c2] : memref<8x8xf32>
      %241 = vector.broadcast %240 : f32 to vector<8xf32>
      %242 = memref.load %alloca[%c1, %c2] : memref<8x8xf32>
      %243 = vector.broadcast %242 : f32 to vector<8xf32>
      %244 = vector.fma %214, %241, %219 : vector<8xf32>
      %245 = memref.load %alloca[%c2, %c2] : memref<8x8xf32>
      %246 = vector.broadcast %245 : f32 to vector<8xf32>
      %247 = vector.fma %214, %243, %222 : vector<8xf32>
      %248 = memref.load %alloca[%c3, %c2] : memref<8x8xf32>
      %249 = vector.broadcast %248 : f32 to vector<8xf32>
      %250 = vector.fma %214, %246, %225 : vector<8xf32>
      %251 = memref.load %alloca[%c4, %c2] : memref<8x8xf32>
      %252 = vector.broadcast %251 : f32 to vector<8xf32>
      %253 = vector.fma %214, %249, %228 : vector<8xf32>
      %254 = memref.load %alloca[%c5, %c2] : memref<8x8xf32>
      %255 = vector.broadcast %254 : f32 to vector<8xf32>
      %256 = vector.fma %214, %252, %231 : vector<8xf32>
      %257 = memref.load %alloca[%c6, %c2] : memref<8x8xf32>
      %258 = vector.broadcast %257 : f32 to vector<8xf32>
      %259 = vector.fma %214, %255, %234 : vector<8xf32>
      %260 = memref.load %alloca[%c7, %c2] : memref<8x8xf32>
      %261 = vector.broadcast %260 : f32 to vector<8xf32>
      %262 = vector.fma %214, %258, %237 : vector<8xf32>
      %263 = vector.fma %214, %261, %238 : vector<8xf32>
      %264 = vector.load %alloca_4[%c4, %c0] : memref<8x8xf32>, vector<8xf32>
      %265 = memref.load %alloca[%c0, %c3] : memref<8x8xf32>
      %266 = vector.broadcast %265 : f32 to vector<8xf32>
      %267 = memref.load %alloca[%c1, %c3] : memref<8x8xf32>
      %268 = vector.broadcast %267 : f32 to vector<8xf32>
      %269 = vector.fma %239, %266, %244 : vector<8xf32>
      %270 = memref.load %alloca[%c2, %c3] : memref<8x8xf32>
      %271 = vector.broadcast %270 : f32 to vector<8xf32>
      %272 = vector.fma %239, %268, %247 : vector<8xf32>
      %273 = memref.load %alloca[%c3, %c3] : memref<8x8xf32>
      %274 = vector.broadcast %273 : f32 to vector<8xf32>
      %275 = vector.fma %239, %271, %250 : vector<8xf32>
      %276 = memref.load %alloca[%c4, %c3] : memref<8x8xf32>
      %277 = vector.broadcast %276 : f32 to vector<8xf32>
      %278 = vector.fma %239, %274, %253 : vector<8xf32>
      %279 = memref.load %alloca[%c5, %c3] : memref<8x8xf32>
      %280 = vector.broadcast %279 : f32 to vector<8xf32>
      %281 = vector.fma %239, %277, %256 : vector<8xf32>
      %282 = memref.load %alloca[%c6, %c3] : memref<8x8xf32>
      %283 = vector.broadcast %282 : f32 to vector<8xf32>
      %284 = vector.fma %239, %280, %259 : vector<8xf32>
      %285 = memref.load %alloca[%c7, %c3] : memref<8x8xf32>
      %286 = vector.broadcast %285 : f32 to vector<8xf32>
      %287 = vector.fma %239, %283, %262 : vector<8xf32>
      %288 = vector.fma %239, %286, %263 : vector<8xf32>
      %289 = vector.load %alloca_4[%c5, %c0] : memref<8x8xf32>, vector<8xf32>
      %290 = memref.load %alloca[%c0, %c4] : memref<8x8xf32>
      %291 = vector.broadcast %290 : f32 to vector<8xf32>
      %292 = memref.load %alloca[%c1, %c4] : memref<8x8xf32>
      %293 = vector.broadcast %292 : f32 to vector<8xf32>
      %294 = vector.fma %264, %291, %269 : vector<8xf32>
      %295 = memref.load %alloca[%c2, %c4] : memref<8x8xf32>
      %296 = vector.broadcast %295 : f32 to vector<8xf32>
      %297 = vector.fma %264, %293, %272 : vector<8xf32>
      %298 = memref.load %alloca[%c3, %c4] : memref<8x8xf32>
      %299 = vector.broadcast %298 : f32 to vector<8xf32>
      %300 = vector.fma %264, %296, %275 : vector<8xf32>
      %301 = memref.load %alloca[%c4, %c4] : memref<8x8xf32>
      %302 = vector.broadcast %301 : f32 to vector<8xf32>
      %303 = vector.fma %264, %299, %278 : vector<8xf32>
      %304 = memref.load %alloca[%c5, %c4] : memref<8x8xf32>
      %305 = vector.broadcast %304 : f32 to vector<8xf32>
      %306 = vector.fma %264, %302, %281 : vector<8xf32>
      %307 = memref.load %alloca[%c6, %c4] : memref<8x8xf32>
      %308 = vector.broadcast %307 : f32 to vector<8xf32>
      %309 = vector.fma %264, %305, %284 : vector<8xf32>
      %310 = memref.load %alloca[%c7, %c4] : memref<8x8xf32>
      %311 = vector.broadcast %310 : f32 to vector<8xf32>
      %312 = vector.fma %264, %308, %287 : vector<8xf32>
      %313 = vector.fma %264, %311, %288 : vector<8xf32>
      %314 = vector.load %alloca_4[%c6, %c0] : memref<8x8xf32>, vector<8xf32>
      %315 = memref.load %alloca[%c0, %c5] : memref<8x8xf32>
      %316 = vector.broadcast %315 : f32 to vector<8xf32>
      %317 = memref.load %alloca[%c1, %c5] : memref<8x8xf32>
      %318 = vector.broadcast %317 : f32 to vector<8xf32>
      %319 = vector.fma %289, %316, %294 : vector<8xf32>
      %320 = memref.load %alloca[%c2, %c5] : memref<8x8xf32>
      %321 = vector.broadcast %320 : f32 to vector<8xf32>
      %322 = vector.fma %289, %318, %297 : vector<8xf32>
      %323 = memref.load %alloca[%c3, %c5] : memref<8x8xf32>
      %324 = vector.broadcast %323 : f32 to vector<8xf32>
      %325 = vector.fma %289, %321, %300 : vector<8xf32>
      %326 = memref.load %alloca[%c4, %c5] : memref<8x8xf32>
      %327 = vector.broadcast %326 : f32 to vector<8xf32>
      %328 = vector.fma %289, %324, %303 : vector<8xf32>
      %329 = memref.load %alloca[%c5, %c5] : memref<8x8xf32>
      %330 = vector.broadcast %329 : f32 to vector<8xf32>
      %331 = vector.fma %289, %327, %306 : vector<8xf32>
      %332 = memref.load %alloca[%c6, %c5] : memref<8x8xf32>
      %333 = vector.broadcast %332 : f32 to vector<8xf32>
      %334 = vector.fma %289, %330, %309 : vector<8xf32>
      %335 = memref.load %alloca[%c7, %c5] : memref<8x8xf32>
      %336 = vector.broadcast %335 : f32 to vector<8xf32>
      %337 = vector.fma %289, %333, %312 : vector<8xf32>
      %338 = vector.fma %289, %336, %313 : vector<8xf32>
      %339 = vector.load %alloca_4[%c7, %c0] : memref<8x8xf32>, vector<8xf32>
      %340 = memref.load %alloca[%c0, %c6] : memref<8x8xf32>
      %341 = vector.broadcast %340 : f32 to vector<8xf32>
      %342 = memref.load %alloca[%c1, %c6] : memref<8x8xf32>
      %343 = vector.broadcast %342 : f32 to vector<8xf32>
      %344 = vector.fma %314, %341, %319 : vector<8xf32>
      %345 = memref.load %alloca[%c2, %c6] : memref<8x8xf32>
      %346 = vector.broadcast %345 : f32 to vector<8xf32>
      %347 = vector.fma %314, %343, %322 : vector<8xf32>
      %348 = memref.load %alloca[%c3, %c6] : memref<8x8xf32>
      %349 = vector.broadcast %348 : f32 to vector<8xf32>
      %350 = vector.fma %314, %346, %325 : vector<8xf32>
      %351 = memref.load %alloca[%c4, %c6] : memref<8x8xf32>
      %352 = vector.broadcast %351 : f32 to vector<8xf32>
      %353 = vector.fma %314, %349, %328 : vector<8xf32>
      %354 = memref.load %alloca[%c5, %c6] : memref<8x8xf32>
      %355 = vector.broadcast %354 : f32 to vector<8xf32>
      %356 = vector.fma %314, %352, %331 : vector<8xf32>
      %357 = memref.load %alloca[%c6, %c6] : memref<8x8xf32>
      %358 = vector.broadcast %357 : f32 to vector<8xf32>
      %359 = vector.fma %314, %355, %334 : vector<8xf32>
      %360 = memref.load %alloca[%c7, %c6] : memref<8x8xf32>
      %361 = vector.broadcast %360 : f32 to vector<8xf32>
      %362 = vector.fma %314, %358, %337 : vector<8xf32>
      %363 = vector.fma %314, %361, %338 : vector<8xf32>
      %364 = memref.load %alloca[%c0, %c7] : memref<8x8xf32>
      %365 = vector.broadcast %364 : f32 to vector<8xf32>
      %366 = memref.load %alloca[%c1, %c7] : memref<8x8xf32>
      %367 = vector.broadcast %366 : f32 to vector<8xf32>
      %368 = vector.fma %339, %365, %344 : vector<8xf32>
      %369 = memref.load %alloca[%c2, %c7] : memref<8x8xf32>
      %370 = vector.broadcast %369 : f32 to vector<8xf32>
      %371 = vector.fma %339, %367, %347 : vector<8xf32>
      %372 = memref.load %alloca[%c3, %c7] : memref<8x8xf32>
      %373 = vector.broadcast %372 : f32 to vector<8xf32>
      %374 = vector.fma %339, %370, %350 : vector<8xf32>
      %375 = memref.load %alloca[%c4, %c7] : memref<8x8xf32>
      %376 = vector.broadcast %375 : f32 to vector<8xf32>
      %377 = vector.fma %339, %373, %353 : vector<8xf32>
      %378 = memref.load %alloca[%c5, %c7] : memref<8x8xf32>
      %379 = vector.broadcast %378 : f32 to vector<8xf32>
      %380 = vector.fma %339, %376, %356 : vector<8xf32>
      %381 = memref.load %alloca[%c6, %c7] : memref<8x8xf32>
      %382 = vector.broadcast %381 : f32 to vector<8xf32>
      %383 = vector.fma %339, %379, %359 : vector<8xf32>
      %384 = memref.load %alloca[%c7, %c7] : memref<8x8xf32>
      %385 = vector.broadcast %384 : f32 to vector<8xf32>
      %386 = vector.fma %339, %382, %362 : vector<8xf32>
      %387 = vector.fma %339, %385, %363 : vector<8xf32>
      %388 = arith.addi %arg10, %cst_0 : vector<8x8xi64>
      %389 = arith.muli %50, %cst_1 : vector<8x8xi32>
      %390 = arith.extsi %389 : vector<8x8xi32> to vector<8x8xi64>
      %391 = arith.addi %arg11, %390 : vector<8x8xi64>
      scf.yield %388, %391, %368, %371, %374, %377, %380, %383, %386, %387 : vector<8x8xi64>, vector<8x8xi64>, vector<8xf32>, vector<8xf32>, vector<8xf32>, vector<8xf32>, vector<8xf32>, vector<8xf32>, vector<8xf32>, vector<8xf32>
    }
    %52 = vector.shape_cast %16 {axis = 1 : i32} : vector<8xi32> to vector<8x1xi32>
    %53 = vector.shape_cast %21 {axis = 0 : i32} : vector<8xi32> to vector<1x8xi32>
    %54 = vector.splat %arg3 : vector<8x1xi32>
    %55 = arith.cmpi slt, %52, %54 : vector<8x1xi32>
    %56 = vector.splat %arg4 : vector<1x8xi32>
    %57 = arith.cmpi slt, %53, %56 : vector<1x8xi32>
    %58 = vector.broadcast %55 : vector<8x1xi1> to vector<8x8xi1>
    %59 = vector.broadcast %57 : vector<1x8xi1> to vector<8x8xi1>
    %60 = arith.andi %58, %59 : vector<8x8xi1>
    %61 = arith.muli %arg8, %14 : i32
    %62 = tt.addptr %arg2, %61 : !tt.ptr<f32>, i32
    %63 = tt.addptr %62, %19 : !tt.ptr<f32>, i32
    %64 = triton_cpu.ptr_to_memref %63 : <f32> -> memref<8xf32>
    %65 = vector.extract %60[0] : vector<8xi1> from vector<8x8xi1>
    vector.maskedstore %64[%c0], %65, %51#2 : memref<8xf32>, vector<8xi1>, vector<8xf32>
    %66 = arith.addi %14, %c1_i32 : i32
    %67 = arith.muli %arg8, %66 : i32
    %68 = tt.addptr %arg2, %67 : !tt.ptr<f32>, i32
    %69 = tt.addptr %68, %19 : !tt.ptr<f32>, i32
    %70 = triton_cpu.ptr_to_memref %69 : <f32> -> memref<8xf32>
    %71 = vector.extract %60[1] : vector<8xi1> from vector<8x8xi1>
    vector.maskedstore %70[%c0], %71, %51#3 : memref<8xf32>, vector<8xi1>, vector<8xf32>
    %72 = arith.addi %14, %c2_i32 : i32
    %73 = arith.muli %arg8, %72 : i32
    %74 = tt.addptr %arg2, %73 : !tt.ptr<f32>, i32
    %75 = tt.addptr %74, %19 : !tt.ptr<f32>, i32
    %76 = triton_cpu.ptr_to_memref %75 : <f32> -> memref<8xf32>
    %77 = vector.extract %60[2] : vector<8xi1> from vector<8x8xi1>
    vector.maskedstore %76[%c0], %77, %51#4 : memref<8xf32>, vector<8xi1>, vector<8xf32>
    %78 = arith.addi %14, %c3_i32 : i32
    %79 = arith.muli %arg8, %78 : i32
    %80 = tt.addptr %arg2, %79 : !tt.ptr<f32>, i32
    %81 = tt.addptr %80, %19 : !tt.ptr<f32>, i32
    %82 = triton_cpu.ptr_to_memref %81 : <f32> -> memref<8xf32>
    %83 = vector.extract %60[3] : vector<8xi1> from vector<8x8xi1>
    vector.maskedstore %82[%c0], %83, %51#5 : memref<8xf32>, vector<8xi1>, vector<8xf32>
    %84 = arith.addi %14, %c4_i32 : i32
    %85 = arith.muli %arg8, %84 : i32
    %86 = tt.addptr %arg2, %85 : !tt.ptr<f32>, i32
    %87 = tt.addptr %86, %19 : !tt.ptr<f32>, i32
    %88 = triton_cpu.ptr_to_memref %87 : <f32> -> memref<8xf32>
    %89 = vector.extract %60[4] : vector<8xi1> from vector<8x8xi1>
    vector.maskedstore %88[%c0], %89, %51#6 : memref<8xf32>, vector<8xi1>, vector<8xf32>
    %90 = arith.addi %14, %c5_i32 : i32
    %91 = arith.muli %arg8, %90 : i32
    %92 = tt.addptr %arg2, %91 : !tt.ptr<f32>, i32
    %93 = tt.addptr %92, %19 : !tt.ptr<f32>, i32
    %94 = triton_cpu.ptr_to_memref %93 : <f32> -> memref<8xf32>
    %95 = vector.extract %60[5] : vector<8xi1> from vector<8x8xi1>
    vector.maskedstore %94[%c0], %95, %51#7 : memref<8xf32>, vector<8xi1>, vector<8xf32>
    %96 = arith.addi %14, %c6_i32 : i32
    %97 = arith.muli %arg8, %96 : i32
    %98 = tt.addptr %arg2, %97 : !tt.ptr<f32>, i32
    %99 = tt.addptr %98, %19 : !tt.ptr<f32>, i32
    %100 = triton_cpu.ptr_to_memref %99 : <f32> -> memref<8xf32>
    %101 = vector.extract %60[6] : vector<8xi1> from vector<8x8xi1>
    vector.maskedstore %100[%c0], %101, %51#8 : memref<8xf32>, vector<8xi1>, vector<8xf32>
    %102 = arith.addi %14, %c7_i32 : i32
    %103 = arith.muli %arg8, %102 : i32
    %104 = tt.addptr %arg2, %103 : !tt.ptr<f32>, i32
    %105 = tt.addptr %104, %19 : !tt.ptr<f32>, i32
    %106 = triton_cpu.ptr_to_memref %105 : <f32> -> memref<8xf32>
    %107 = vector.extract %60[7] : vector<8xi1> from vector<8x8xi1>
    vector.maskedstore %106[%c0], %107, %51#9 : memref<8xf32>, vector<8xi1>, vector<8xf32>
    tt.return
  }
}

{-#
  external_resources: {
    mlir_reproducer: {
      pipeline: "builtin.module(any(tt.func(triton-cpu-lower-multi-reduction),expand-strided-metadata,convert-vector-to-scf{full-unroll=true lower-scalable=false lower-tensors=false target-rank=1},lower-affine,convert-scf-to-cf,convert-index-to-llvm{index-bitwidth=0},triton-cpu-func-op-to-llvm,triton-cpu-get-program-id-op-to-llvm,triton-cpu-memory-op-to-llvm,triton-cpu-atomic-ops-to-llvm,triton-cpu-debug-ops-to-llvm,triton-cpu-math-to-vec-lib{lib=sleef},convert-math-to-llvm{approximate-log1p=true},convert-math-to-libm,convert-vector-to-llvm{enable-amx=true enable-arm-neon=false enable-arm-sve=false enable-x86vector=true force-32bit-vector-indices=true reassociate-fp-reductions=true vector-contract-lowering=outerproduct vector-transpose-lowering=eltwise},finalize-memref-to-llvm{index-bitwidth=0 use-aligned-alloc=false use-generic-functions=false},reconcile-unrealized-casts,convert-arith-to-llvm{index-bitwidth=0},convert-func-to-llvm{index-bitwidth=0 use-bare-ptr-memref-call-conv=false},convert-ub-to-llvm{index-bitwidth=0},canonicalize{  max-iterations=10 max-num-rewrites=-1 region-simplify=normal test-convergence=false top-down=true},cse,symbol-dce,enable-line-info))",
      disable_threading: false,
      verify_each: false
    }
  }
#-}
