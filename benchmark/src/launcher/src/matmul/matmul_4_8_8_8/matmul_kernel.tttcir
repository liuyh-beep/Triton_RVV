#loc = loc("/home/yuhao/T_RVV/benchmark/auto-tuner/../src/triton/matmul.py":24:0)
module {
  tt.func public @matmul_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/yuhao/T_RVV/benchmark/auto-tuner/../src/triton/matmul.py":24:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/yuhao/T_RVV/benchmark/auto-tuner/../src/triton/matmul.py":24:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/yuhao/T_RVV/benchmark/auto-tuner/../src/triton/matmul.py":24:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/home/yuhao/T_RVV/benchmark/auto-tuner/../src/triton/matmul.py":24:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("/home/yuhao/T_RVV/benchmark/auto-tuner/../src/triton/matmul.py":24:0), %arg5: i32 {tt.divisibility = 16 : i32} loc("/home/yuhao/T_RVV/benchmark/auto-tuner/../src/triton/matmul.py":24:0), %arg6: i32 {tt.divisibility = 16 : i32} loc("/home/yuhao/T_RVV/benchmark/auto-tuner/../src/triton/matmul.py":24:0), %arg7: i32 {tt.divisibility = 16 : i32} loc("/home/yuhao/T_RVV/benchmark/auto-tuner/../src/triton/matmul.py":24:0), %arg8: i32 {tt.divisibility = 16 : i32} loc("/home/yuhao/T_RVV/benchmark/auto-tuner/../src/triton/matmul.py":24:0)) attributes {noinline = false} {
    %c23 = arith.constant 23 : index loc(#loc1)
    %c22 = arith.constant 22 : index loc(#loc1)
    %c21 = arith.constant 21 : index loc(#loc1)
    %c20 = arith.constant 20 : index loc(#loc1)
    %c19 = arith.constant 19 : index loc(#loc1)
    %c18 = arith.constant 18 : index loc(#loc1)
    %c17 = arith.constant 17 : index loc(#loc1)
    %cst = arith.constant dense<0.000000e+00> : vector<8xf32> loc(#loc1)
    %c7 = arith.constant 7 : index loc(#loc1)
    %c6 = arith.constant 6 : index loc(#loc1)
    %c5 = arith.constant 5 : index loc(#loc1)
    %c4 = arith.constant 4 : index loc(#loc1)
    %c3 = arith.constant 3 : index loc(#loc1)
    %c2 = arith.constant 2 : index loc(#loc1)
    %c1 = arith.constant 1 : index loc(#loc1)
    %c16 = arith.constant 16 : index loc(#loc1)
    %c32 = arith.constant 32 : index loc(#loc1)
    %cst_0 = arith.constant dense<0.000000e+00> : vector<4x8xf32> loc(#loc1)
    %c7_i32 = arith.constant 7 : i32 loc(#loc1)
    %c3_i32 = arith.constant 3 : i32 loc(#loc1)
    %c1_i32 = arith.constant 1 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %c1_i64 = arith.constant 1 : i64 loc(#loc1)
    %c4_i32 = arith.constant 4 : i32 loc(#loc1)
    %c8_i32 = arith.constant 8 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.addi %arg3, %c3_i32 : i32 loc(#loc31)
    %2 = arith.divsi %1, %c4_i32 : i32 loc(#loc32)
    %3 = arith.addi %arg4, %c7_i32 : i32 loc(#loc33)
    %4 = arith.divsi %3, %c8_i32 : i32 loc(#loc34)
    %5 = arith.muli %4, %c8_i32 : i32 loc(#loc7)
    %6 = arith.divsi %0, %5 : i32 loc(#loc8)
    %7 = arith.muli %6, %c8_i32 : i32 loc(#loc9)
    %8 = arith.subi %2, %7 : i32 loc(#loc10)
    %9 = arith.minsi %8, %c8_i32 : i32 loc(#loc11)
    %10 = arith.remsi %0, %9 : i32 loc(#loc12)
    %11 = arith.addi %7, %10 : i32 loc(#loc13)
    %12 = arith.remsi %0, %5 : i32 loc(#loc14)
    %13 = arith.divsi %12, %9 : i32 loc(#loc15)
    %14 = arith.muli %11, %c4_i32 : i32 loc(#loc16)
    %15 = arith.muli %13, %c8_i32 : i32 loc(#loc17)
    %16 = arith.extsi %arg3 : i32 to i64 loc(#loc18)
    %17 = arith.extsi %arg5 : i32 to i64 loc(#loc18)
    %18 = arith.extsi %arg6 : i32 to i64 loc(#loc18)
    %19 = tt.make_tensor_ptr %arg0, [%16, %17], [%18, %c1_i64], [%14, %c0_i32] {order = array<i32: 1, 0>} : <tensor<4x8xf32>> loc(#loc18)
    %20 = arith.extsi %arg4 : i32 to i64 loc(#loc19)
    %21 = arith.extsi %arg7 : i32 to i64 loc(#loc19)
    %22 = tt.make_tensor_ptr %arg1, [%17, %20], [%21, %c1_i64], [%c0_i32, %15] {order = array<i32: 1, 0>} : <tensor<8x8xf32>> loc(#loc19)
    %23 = arith.divsi %arg5, %c8_i32 : i32 loc(#loc35)
    %24:6 = scf.for %arg9 = %c0_i32 to %23 step %c1_i32 iter_args(%arg10 = %19, %arg11 = %22, %arg12 = %cst, %arg13 = %cst, %arg14 = %cst, %arg15 = %cst) -> (!tt.ptr<tensor<4x8xf32>>, !tt.ptr<tensor<8x8xf32>>, vector<8xf32>, vector<8xf32>, vector<8xf32>, vector<8xf32>)  : i32 {
      %33 = triton_cpu.extract_memref %arg10 : <tensor<4x8xf32>> -> memref<?x?xf32, strided<[?, 1]>> loc(#loc22)
      %34:2 = triton_cpu.extract_indices %arg10 : <tensor<4x8xf32>> -> index, index loc(#loc22)
      %35 = triton_cpu.extract_memref %arg11 : <tensor<8x8xf32>> -> memref<?x?xf32, strided<[?, 1]>> loc(#loc23)
      %36:2 = triton_cpu.extract_indices %arg11 : <tensor<8x8xf32>> -> index, index loc(#loc23)
      %37 = arith.addi %34#1, %c32 : index loc(#loc24)
      %38 = arith.addi %36#0, %c16 : index loc(#loc24)
      %39 = vector.load %35[%36#0, %36#1] : memref<?x?xf32, strided<[?, 1]>>, vector<8xf32> loc(#loc24)
      %40 = arith.addi %36#0, %c1 : index loc(#loc24)
      %41 = vector.load %35[%40, %36#1] : memref<?x?xf32, strided<[?, 1]>>, vector<8xf32> loc(#loc24)
      memref.prefetch %35[%38, %36#1], read, locality<1>, data : memref<?x?xf32, strided<[?, 1]>> loc(#loc24)
      %42 = memref.load %33[%34#0, %34#1] : memref<?x?xf32, strided<[?, 1]>> loc(#loc24)
      %43 = vector.broadcast %42 : f32 to vector<8xf32> loc(#loc24)
      %44 = arith.addi %34#0, %c1 : index loc(#loc24)
      %45 = memref.load %33[%44, %34#1] : memref<?x?xf32, strided<[?, 1]>> loc(#loc24)
      %46 = vector.broadcast %45 : f32 to vector<8xf32> loc(#loc24)
      memref.prefetch %33[%34#0, %37], read, locality<3>, data : memref<?x?xf32, strided<[?, 1]>> loc(#loc24)
      %47 = vector.fma %39, %43, %arg12 : vector<8xf32> loc(#loc24)
      %48 = arith.addi %34#0, %c2 : index loc(#loc24)
      %49 = memref.load %33[%48, %34#1] : memref<?x?xf32, strided<[?, 1]>> loc(#loc24)
      %50 = vector.broadcast %49 : f32 to vector<8xf32> loc(#loc24)
      memref.prefetch %33[%44, %37], read, locality<3>, data : memref<?x?xf32, strided<[?, 1]>> loc(#loc24)
      %51 = vector.fma %39, %46, %arg13 : vector<8xf32> loc(#loc24)
      %52 = arith.addi %34#0, %c3 : index loc(#loc24)
      %53 = memref.load %33[%52, %34#1] : memref<?x?xf32, strided<[?, 1]>> loc(#loc24)
      %54 = vector.broadcast %53 : f32 to vector<8xf32> loc(#loc24)
      memref.prefetch %33[%48, %37], read, locality<3>, data : memref<?x?xf32, strided<[?, 1]>> loc(#loc24)
      %55 = vector.fma %39, %50, %arg14 : vector<8xf32> loc(#loc24)
      memref.prefetch %33[%52, %37], read, locality<3>, data : memref<?x?xf32, strided<[?, 1]>> loc(#loc24)
      %56 = vector.fma %39, %54, %arg15 : vector<8xf32> loc(#loc24)
      %57 = arith.addi %36#0, %c2 : index loc(#loc24)
      %58 = vector.load %35[%57, %36#1] : memref<?x?xf32, strided<[?, 1]>>, vector<8xf32> loc(#loc24)
      %59 = arith.addi %36#0, %c17 : index loc(#loc24)
      memref.prefetch %35[%59, %36#1], read, locality<1>, data : memref<?x?xf32, strided<[?, 1]>> loc(#loc24)
      %60 = arith.addi %34#1, %c1 : index loc(#loc24)
      %61 = memref.load %33[%34#0, %60] : memref<?x?xf32, strided<[?, 1]>> loc(#loc24)
      %62 = vector.broadcast %61 : f32 to vector<8xf32> loc(#loc24)
      %63 = memref.load %33[%44, %60] : memref<?x?xf32, strided<[?, 1]>> loc(#loc24)
      %64 = vector.broadcast %63 : f32 to vector<8xf32> loc(#loc24)
      %65 = vector.fma %41, %62, %47 : vector<8xf32> loc(#loc24)
      %66 = memref.load %33[%48, %60] : memref<?x?xf32, strided<[?, 1]>> loc(#loc24)
      %67 = vector.broadcast %66 : f32 to vector<8xf32> loc(#loc24)
      %68 = vector.fma %41, %64, %51 : vector<8xf32> loc(#loc24)
      %69 = memref.load %33[%52, %60] : memref<?x?xf32, strided<[?, 1]>> loc(#loc24)
      %70 = vector.broadcast %69 : f32 to vector<8xf32> loc(#loc24)
      %71 = vector.fma %41, %67, %55 : vector<8xf32> loc(#loc24)
      %72 = vector.fma %41, %70, %56 : vector<8xf32> loc(#loc24)
      %73 = arith.addi %36#0, %c3 : index loc(#loc24)
      %74 = vector.load %35[%73, %36#1] : memref<?x?xf32, strided<[?, 1]>>, vector<8xf32> loc(#loc24)
      %75 = arith.addi %36#0, %c18 : index loc(#loc24)
      memref.prefetch %35[%75, %36#1], read, locality<1>, data : memref<?x?xf32, strided<[?, 1]>> loc(#loc24)
      %76 = arith.addi %34#1, %c2 : index loc(#loc24)
      %77 = memref.load %33[%34#0, %76] : memref<?x?xf32, strided<[?, 1]>> loc(#loc24)
      %78 = vector.broadcast %77 : f32 to vector<8xf32> loc(#loc24)
      %79 = memref.load %33[%44, %76] : memref<?x?xf32, strided<[?, 1]>> loc(#loc24)
      %80 = vector.broadcast %79 : f32 to vector<8xf32> loc(#loc24)
      %81 = vector.fma %58, %78, %65 : vector<8xf32> loc(#loc24)
      %82 = memref.load %33[%48, %76] : memref<?x?xf32, strided<[?, 1]>> loc(#loc24)
      %83 = vector.broadcast %82 : f32 to vector<8xf32> loc(#loc24)
      %84 = vector.fma %58, %80, %68 : vector<8xf32> loc(#loc24)
      %85 = memref.load %33[%52, %76] : memref<?x?xf32, strided<[?, 1]>> loc(#loc24)
      %86 = vector.broadcast %85 : f32 to vector<8xf32> loc(#loc24)
      %87 = vector.fma %58, %83, %71 : vector<8xf32> loc(#loc24)
      %88 = vector.fma %58, %86, %72 : vector<8xf32> loc(#loc24)
      %89 = arith.addi %36#0, %c4 : index loc(#loc24)
      %90 = vector.load %35[%89, %36#1] : memref<?x?xf32, strided<[?, 1]>>, vector<8xf32> loc(#loc24)
      %91 = arith.addi %36#0, %c19 : index loc(#loc24)
      memref.prefetch %35[%91, %36#1], read, locality<1>, data : memref<?x?xf32, strided<[?, 1]>> loc(#loc24)
      %92 = arith.addi %34#1, %c3 : index loc(#loc24)
      %93 = memref.load %33[%34#0, %92] : memref<?x?xf32, strided<[?, 1]>> loc(#loc24)
      %94 = vector.broadcast %93 : f32 to vector<8xf32> loc(#loc24)
      %95 = memref.load %33[%44, %92] : memref<?x?xf32, strided<[?, 1]>> loc(#loc24)
      %96 = vector.broadcast %95 : f32 to vector<8xf32> loc(#loc24)
      %97 = vector.fma %74, %94, %81 : vector<8xf32> loc(#loc24)
      %98 = memref.load %33[%48, %92] : memref<?x?xf32, strided<[?, 1]>> loc(#loc24)
      %99 = vector.broadcast %98 : f32 to vector<8xf32> loc(#loc24)
      %100 = vector.fma %74, %96, %84 : vector<8xf32> loc(#loc24)
      %101 = memref.load %33[%52, %92] : memref<?x?xf32, strided<[?, 1]>> loc(#loc24)
      %102 = vector.broadcast %101 : f32 to vector<8xf32> loc(#loc24)
      %103 = vector.fma %74, %99, %87 : vector<8xf32> loc(#loc24)
      %104 = vector.fma %74, %102, %88 : vector<8xf32> loc(#loc24)
      %105 = arith.addi %36#0, %c5 : index loc(#loc24)
      %106 = vector.load %35[%105, %36#1] : memref<?x?xf32, strided<[?, 1]>>, vector<8xf32> loc(#loc24)
      %107 = arith.addi %36#0, %c20 : index loc(#loc24)
      memref.prefetch %35[%107, %36#1], read, locality<1>, data : memref<?x?xf32, strided<[?, 1]>> loc(#loc24)
      %108 = arith.addi %34#1, %c4 : index loc(#loc24)
      %109 = memref.load %33[%34#0, %108] : memref<?x?xf32, strided<[?, 1]>> loc(#loc24)
      %110 = vector.broadcast %109 : f32 to vector<8xf32> loc(#loc24)
      %111 = memref.load %33[%44, %108] : memref<?x?xf32, strided<[?, 1]>> loc(#loc24)
      %112 = vector.broadcast %111 : f32 to vector<8xf32> loc(#loc24)
      %113 = vector.fma %90, %110, %97 : vector<8xf32> loc(#loc24)
      %114 = memref.load %33[%48, %108] : memref<?x?xf32, strided<[?, 1]>> loc(#loc24)
      %115 = vector.broadcast %114 : f32 to vector<8xf32> loc(#loc24)
      %116 = vector.fma %90, %112, %100 : vector<8xf32> loc(#loc24)
      %117 = memref.load %33[%52, %108] : memref<?x?xf32, strided<[?, 1]>> loc(#loc24)
      %118 = vector.broadcast %117 : f32 to vector<8xf32> loc(#loc24)
      %119 = vector.fma %90, %115, %103 : vector<8xf32> loc(#loc24)
      %120 = vector.fma %90, %118, %104 : vector<8xf32> loc(#loc24)
      %121 = arith.addi %36#0, %c6 : index loc(#loc24)
      %122 = vector.load %35[%121, %36#1] : memref<?x?xf32, strided<[?, 1]>>, vector<8xf32> loc(#loc24)
      %123 = arith.addi %36#0, %c21 : index loc(#loc24)
      memref.prefetch %35[%123, %36#1], read, locality<1>, data : memref<?x?xf32, strided<[?, 1]>> loc(#loc24)
      %124 = arith.addi %34#1, %c5 : index loc(#loc24)
      %125 = memref.load %33[%34#0, %124] : memref<?x?xf32, strided<[?, 1]>> loc(#loc24)
      %126 = vector.broadcast %125 : f32 to vector<8xf32> loc(#loc24)
      %127 = memref.load %33[%44, %124] : memref<?x?xf32, strided<[?, 1]>> loc(#loc24)
      %128 = vector.broadcast %127 : f32 to vector<8xf32> loc(#loc24)
      %129 = vector.fma %106, %126, %113 : vector<8xf32> loc(#loc24)
      %130 = memref.load %33[%48, %124] : memref<?x?xf32, strided<[?, 1]>> loc(#loc24)
      %131 = vector.broadcast %130 : f32 to vector<8xf32> loc(#loc24)
      %132 = vector.fma %106, %128, %116 : vector<8xf32> loc(#loc24)
      %133 = memref.load %33[%52, %124] : memref<?x?xf32, strided<[?, 1]>> loc(#loc24)
      %134 = vector.broadcast %133 : f32 to vector<8xf32> loc(#loc24)
      %135 = vector.fma %106, %131, %119 : vector<8xf32> loc(#loc24)
      %136 = vector.fma %106, %134, %120 : vector<8xf32> loc(#loc24)
      %137 = arith.addi %36#0, %c7 : index loc(#loc24)
      %138 = vector.load %35[%137, %36#1] : memref<?x?xf32, strided<[?, 1]>>, vector<8xf32> loc(#loc24)
      %139 = arith.addi %36#0, %c22 : index loc(#loc24)
      memref.prefetch %35[%139, %36#1], read, locality<1>, data : memref<?x?xf32, strided<[?, 1]>> loc(#loc24)
      %140 = arith.addi %34#1, %c6 : index loc(#loc24)
      %141 = memref.load %33[%34#0, %140] : memref<?x?xf32, strided<[?, 1]>> loc(#loc24)
      %142 = vector.broadcast %141 : f32 to vector<8xf32> loc(#loc24)
      %143 = memref.load %33[%44, %140] : memref<?x?xf32, strided<[?, 1]>> loc(#loc24)
      %144 = vector.broadcast %143 : f32 to vector<8xf32> loc(#loc24)
      %145 = vector.fma %122, %142, %129 : vector<8xf32> loc(#loc24)
      %146 = memref.load %33[%48, %140] : memref<?x?xf32, strided<[?, 1]>> loc(#loc24)
      %147 = vector.broadcast %146 : f32 to vector<8xf32> loc(#loc24)
      %148 = vector.fma %122, %144, %132 : vector<8xf32> loc(#loc24)
      %149 = memref.load %33[%52, %140] : memref<?x?xf32, strided<[?, 1]>> loc(#loc24)
      %150 = vector.broadcast %149 : f32 to vector<8xf32> loc(#loc24)
      %151 = vector.fma %122, %147, %135 : vector<8xf32> loc(#loc24)
      %152 = vector.fma %122, %150, %136 : vector<8xf32> loc(#loc24)
      %153 = arith.addi %36#0, %c23 : index loc(#loc24)
      memref.prefetch %35[%153, %36#1], read, locality<1>, data : memref<?x?xf32, strided<[?, 1]>> loc(#loc24)
      %154 = arith.addi %34#1, %c7 : index loc(#loc24)
      %155 = memref.load %33[%34#0, %154] : memref<?x?xf32, strided<[?, 1]>> loc(#loc24)
      %156 = vector.broadcast %155 : f32 to vector<8xf32> loc(#loc24)
      %157 = memref.load %33[%44, %154] : memref<?x?xf32, strided<[?, 1]>> loc(#loc24)
      %158 = vector.broadcast %157 : f32 to vector<8xf32> loc(#loc24)
      %159 = vector.fma %138, %156, %145 : vector<8xf32> loc(#loc24)
      %160 = memref.load %33[%48, %154] : memref<?x?xf32, strided<[?, 1]>> loc(#loc24)
      %161 = vector.broadcast %160 : f32 to vector<8xf32> loc(#loc24)
      %162 = vector.fma %138, %158, %148 : vector<8xf32> loc(#loc24)
      %163 = memref.load %33[%52, %154] : memref<?x?xf32, strided<[?, 1]>> loc(#loc24)
      %164 = vector.broadcast %163 : f32 to vector<8xf32> loc(#loc24)
      %165 = vector.fma %138, %161, %151 : vector<8xf32> loc(#loc24)
      %166 = vector.fma %138, %164, %152 : vector<8xf32> loc(#loc24)
      %167 = tt.advance %arg10, [%c0_i32, %c8_i32] : <tensor<4x8xf32>> loc(#loc25)
      %168 = tt.advance %arg11, [%c8_i32, %c0_i32] : <tensor<8x8xf32>> loc(#loc26)
      scf.yield %167, %168, %159, %162, %165, %166 : !tt.ptr<tensor<4x8xf32>>, !tt.ptr<tensor<8x8xf32>>, vector<8xf32>, vector<8xf32>, vector<8xf32>, vector<8xf32> loc(#loc27)
    } loc(#loc21)
    %25 = vector.insert %24#2, %cst_0 [0] : vector<8xf32> into vector<4x8xf32> loc(#loc24)
    %26 = vector.insert %24#3, %25 [1] : vector<8xf32> into vector<4x8xf32> loc(#loc24)
    %27 = vector.insert %24#4, %26 [2] : vector<8xf32> into vector<4x8xf32> loc(#loc24)
    %28 = vector.insert %24#5, %27 [3] : vector<8xf32> into vector<4x8xf32> loc(#loc24)
    %29 = arith.extsi %arg8 : i32 to i64 loc(#loc28)
    %30 = tt.make_tensor_ptr %arg2, [%16, %20], [%29, %c1_i64], [%14, %15] {order = array<i32: 1, 0>} : <tensor<4x8xf32>> loc(#loc28)
    %31 = triton_cpu.extract_memref %30 : <tensor<4x8xf32>> -> memref<?x?xf32, strided<[?, 1]>> loc(#loc29)
    %32:2 = triton_cpu.extract_indices %30 : <tensor<4x8xf32>> -> index, index loc(#loc29)
    vector.transfer_write %28, %31[%32#0, %32#1] {in_bounds = [true, true]} : vector<4x8xf32>, memref<?x?xf32, strided<[?, 1]>> loc(#loc29)
    tt.return loc(#loc30)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/yuhao/T_RVV/benchmark/auto-tuner/../src/triton/matmul.py":45:24)
#loc3 = loc("/home/yuhao/triton-cpu/python/triton/language/standard.py":40:22)
#loc4 = loc("/home/yuhao/T_RVV/benchmark/auto-tuner/../src/triton/matmul.py":46:27)
#loc5 = loc("/home/yuhao/triton-cpu/python/triton/language/standard.py":40:28)
#loc6 = loc("/home/yuhao/T_RVV/benchmark/auto-tuner/../src/triton/matmul.py":47:27)
#loc7 = loc("/home/yuhao/T_RVV/benchmark/auto-tuner/../src/triton/matmul.py":48:38)
#loc8 = loc("/home/yuhao/T_RVV/benchmark/auto-tuner/../src/triton/matmul.py":49:22)
#loc9 = loc("/home/yuhao/T_RVV/benchmark/auto-tuner/../src/triton/matmul.py":50:29)
#loc10 = loc("/home/yuhao/T_RVV/benchmark/auto-tuner/../src/triton/matmul.py":51:35)
#loc11 = loc("/home/yuhao/T_RVV/benchmark/auto-tuner/../src/triton/matmul.py":51:48)
#loc12 = loc("/home/yuhao/T_RVV/benchmark/auto-tuner/../src/triton/matmul.py":52:33)
#loc13 = loc("/home/yuhao/T_RVV/benchmark/auto-tuner/../src/triton/matmul.py":52:27)
#loc14 = loc("/home/yuhao/T_RVV/benchmark/auto-tuner/../src/triton/matmul.py":53:19)
#loc15 = loc("/home/yuhao/T_RVV/benchmark/auto-tuner/../src/triton/matmul.py":53:40)
#loc16 = loc("/home/yuhao/T_RVV/benchmark/auto-tuner/../src/triton/matmul.py":63:33)
#loc17 = loc("/home/yuhao/T_RVV/benchmark/auto-tuner/../src/triton/matmul.py":64:33)
#loc18 = loc("/home/yuhao/T_RVV/benchmark/auto-tuner/../src/triton/matmul.py":67:39)
#loc19 = loc("/home/yuhao/T_RVV/benchmark/auto-tuner/../src/triton/matmul.py":70:39)
#loc20 = loc("/home/yuhao/T_RVV/benchmark/auto-tuner/../src/triton/matmul.py":79:33)
#loc21 = loc("/home/yuhao/T_RVV/benchmark/auto-tuner/../src/triton/matmul.py":79:22)
#loc22 = loc("/home/yuhao/T_RVV/benchmark/auto-tuner/../src/triton/matmul.py":83:20)
#loc23 = loc("/home/yuhao/T_RVV/benchmark/auto-tuner/../src/triton/matmul.py":84:20)
#loc24 = loc("/home/yuhao/T_RVV/benchmark/auto-tuner/../src/triton/matmul.py":86:35)
#loc25 = loc("/home/yuhao/T_RVV/benchmark/auto-tuner/../src/triton/matmul.py":89:48)
#loc26 = loc("/home/yuhao/T_RVV/benchmark/auto-tuner/../src/triton/matmul.py":90:48)
#loc27 = loc("/home/yuhao/T_RVV/benchmark/auto-tuner/../src/triton/matmul.py":88:8)
#loc28 = loc("/home/yuhao/T_RVV/benchmark/auto-tuner/../src/triton/matmul.py":102:81)
#loc29 = loc("/home/yuhao/T_RVV/benchmark/auto-tuner/../src/triton/matmul.py":103:29)
#loc30 = loc("/home/yuhao/T_RVV/benchmark/auto-tuner/../src/triton/matmul.py":99:4)
#loc31 = loc(callsite(#loc3 at #loc4))
#loc32 = loc(callsite(#loc5 at #loc4))
#loc33 = loc(callsite(#loc3 at #loc6))
#loc34 = loc(callsite(#loc5 at #loc6))
#loc35 = loc(callsite(#loc5 at #loc20))
