#loc = loc("/home/yuhao/T_RVV/benchmark/src/triton/softmax.py":60:0)
module {
  tt.func public @softmax_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/yuhao/T_RVV/benchmark/src/triton/softmax.py":60:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/yuhao/T_RVV/benchmark/src/triton/softmax.py":60:0), %arg2: i32 loc("/home/yuhao/T_RVV/benchmark/src/triton/softmax.py":60:0), %arg3: i32 loc("/home/yuhao/T_RVV/benchmark/src/triton/softmax.py":60:0), %arg4: i32 loc("/home/yuhao/T_RVV/benchmark/src/triton/softmax.py":60:0)) attributes {noinline = false} {
    %c0 = arith.constant 0 : index loc(#loc1)
    %cst = arith.constant dense<[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]> : vector<64xi32> loc(#loc1)
    %cst_0 = arith.constant 0xFF800000 : f32 loc(#loc1)
    %c1_i32 = arith.constant 1 : i32 loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst_1 = arith.constant 0.000000e+00 : f32 loc(#loc1)
    %cst_2 = arith.constant dense<0xFF800000> : vector<64xf32> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %arg2 : i32 loc(#loc3)
    %2 = tt.addptr %arg1, %1 : !tt.ptr<f32>, i32 loc(#loc4)
    %3 = vector.splat %arg4 : vector<64xi32> loc(#loc5)
    %4 = scf.for %arg5 = %c0_i32 to %arg4 step %c64_i32 iter_args(%arg6 = %cst_0) -> (f32)  : i32 {
      %9 = vector.splat %arg5 : vector<64xi32> loc(#loc7)
      %10 = arith.addi %9, %cst : vector<64xi32> loc(#loc7)
      %11 = arith.cmpi slt, %10, %3 : vector<64xi32> loc(#loc5)
      %12 = tt.addptr %2, %arg5 : !tt.ptr<f32>, i32 loc(#loc8)
      %13 = triton_cpu.ptr_to_memref %12 : <f32> -> memref<64xf32> loc(#loc9)
      %14 = vector.maskedload %13[%c0], %11, %cst_2 : memref<64xf32>, vector<64xi1>, vector<64xf32> into vector<64xf32> loc(#loc9)
      %15 = vector.reduction <maxnumf>, %14, %cst_0 : vector<64xf32> into f32 loc(#loc33)
      %16 = arith.maxnumf %arg6, %15 : f32 loc(#loc12)
      scf.yield %16 : f32 loc(#loc13)
    } loc(#loc6)
    %5 = arith.muli %0, %arg3 : i32 loc(#loc14)
    %6 = tt.addptr %arg0, %5 : !tt.ptr<f32>, i32 loc(#loc15)
    %7 = scf.for %arg5 = %c0_i32 to %arg4 step %c1_i32 iter_args(%arg6 = %cst_1) -> (f32)  : i32 {
      %9 = tt.addptr %2, %arg5 : !tt.ptr<f32>, i32 loc(#loc17)
      %10 = tt.load %9 : !tt.ptr<f32> loc(#loc18)
      %11 = arith.subf %10, %4 : f32 loc(#loc19)
      %12 = math.exp %11 : f32 loc(#loc20)
      %13 = arith.addf %arg6, %12 : f32 loc(#loc21)
      %14 = tt.addptr %6, %arg5 : !tt.ptr<f32>, i32 loc(#loc22)
      tt.store %14, %12 : !tt.ptr<f32> loc(#loc23)
      scf.yield %13 : f32 loc(#loc24)
    } loc(#loc16)
    %8 = vector.splat %7 : vector<64xf32> loc(#loc25)
    scf.for %arg5 = %c0_i32 to %arg4 step %c64_i32  : i32 {
      %9 = vector.splat %arg5 : vector<64xi32> loc(#loc27)
      %10 = arith.addi %9, %cst : vector<64xi32> loc(#loc27)
      %11 = arith.cmpi slt, %10, %3 : vector<64xi32> loc(#loc28)
      %12 = tt.addptr %6, %arg5 : !tt.ptr<f32>, i32 loc(#loc29)
      %13 = triton_cpu.ptr_to_memref %12 : <f32> -> memref<64xf32> loc(#loc30)
      %14 = vector.maskedload %13[%c0], %11, %cst_2 : memref<64xf32>, vector<64xi1>, vector<64xf32> into vector<64xf32> loc(#loc30)
      %15 = arith.divf %14, %8 : vector<64xf32> loc(#loc25)
      vector.maskedstore %13[%c0], %11, %15 : memref<64xf32>, vector<64xi1>, vector<64xf32> loc(#loc31)
    } loc(#loc26)
    tt.return loc(#loc32)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/yuhao/T_RVV/benchmark/src/triton/softmax.py":62:28)
#loc3 = loc("/home/yuhao/T_RVV/benchmark/src/triton/softmax.py":64:42)
#loc4 = loc("/home/yuhao/T_RVV/benchmark/src/triton/softmax.py":64:32)
#loc5 = loc("/home/yuhao/T_RVV/benchmark/src/triton/softmax.py":69:70)
#loc6 = loc("/home/yuhao/T_RVV/benchmark/src/triton/softmax.py":67:32)
#loc7 = loc("/home/yuhao/T_RVV/benchmark/src/triton/softmax.py":68:28)
#loc8 = loc("/home/yuhao/T_RVV/benchmark/src/triton/softmax.py":69:38)
#loc9 = loc("/home/yuhao/T_RVV/benchmark/src/triton/softmax.py":69:22)
#loc10 = loc("/home/yuhao/triton-cpu/python/triton/language/standard.py":184:40)
#loc11 = loc("/home/yuhao/T_RVV/benchmark/src/triton/softmax.py":70:45)
#loc12 = loc("/home/yuhao/T_RVV/benchmark/src/triton/softmax.py":70:38)
#loc13 = loc("/home/yuhao/T_RVV/benchmark/src/triton/softmax.py":70:8)
#loc14 = loc("/home/yuhao/T_RVV/benchmark/src/triton/softmax.py":73:50)
#loc15 = loc("/home/yuhao/T_RVV/benchmark/src/triton/softmax.py":73:40)
#loc16 = loc("/home/yuhao/T_RVV/benchmark/src/triton/softmax.py":75:24)
#loc17 = loc("/home/yuhao/T_RVV/benchmark/src/triton/softmax.py":76:38)
#loc18 = loc("/home/yuhao/T_RVV/benchmark/src/triton/softmax.py":76:22)
#loc19 = loc("/home/yuhao/T_RVV/benchmark/src/triton/softmax.py":78:30)
#loc20 = loc("/home/yuhao/T_RVV/benchmark/src/triton/softmax.py":80:27)
#loc21 = loc("/home/yuhao/T_RVV/benchmark/src/triton/softmax.py":81:23)
#loc22 = loc("/home/yuhao/T_RVV/benchmark/src/triton/softmax.py":83:40)
#loc23 = loc("/home/yuhao/T_RVV/benchmark/src/triton/softmax.py":83:45)
#loc24 = loc("/home/yuhao/T_RVV/benchmark/src/triton/softmax.py":83:8)
#loc25 = loc("/home/yuhao/T_RVV/benchmark/src/triton/softmax.py":91:31)
#loc26 = loc("/home/yuhao/T_RVV/benchmark/src/triton/softmax.py":87:32)
#loc27 = loc("/home/yuhao/T_RVV/benchmark/src/triton/softmax.py":88:28)
#loc28 = loc("/home/yuhao/T_RVV/benchmark/src/triton/softmax.py":89:77)
#loc29 = loc("/home/yuhao/T_RVV/benchmark/src/triton/softmax.py":89:45)
#loc30 = loc("/home/yuhao/T_RVV/benchmark/src/triton/softmax.py":89:22)
#loc31 = loc("/home/yuhao/T_RVV/benchmark/src/triton/softmax.py":92:53)
#loc32 = loc("/home/yuhao/T_RVV/benchmark/src/triton/softmax.py":87:4)
#loc33 = loc(callsite(#loc10 at #loc11))
